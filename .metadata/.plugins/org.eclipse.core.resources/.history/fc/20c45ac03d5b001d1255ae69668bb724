/*
 * input_processing.c
 *
 *  Created on: Nov 2, 2022
 *      Author: Admin
 */
#include "main.h"
#include "button.h"
#include "LED_display.h"
#include "software_timer.h"
#include "display7SEG.h"

#define TIMER1 0
#define TIMER2 1
#define TIMER3 2
#define TIMER4 3

#define HALF_A_SEC 500
#define SCANNING_FREQ 250
#define REV_TIMER_UP 10

enum ButtonState {
    NORMAL_MODE, BUTTON1_MODE, BUTTON2_MODE, BUTTON3_MODE
};
enum ButtonState buttonState = NORMAL_MODE;

enum LED_STATE {
    INIT1, RED_WEST_ON, GREEN_WEST_ON, YELLOW_WEST_ON
};
enum LED_STATE ledState = INIT1;

enum LED_STATE2 {
    INIT2, GREEN_NORTH_ON, YELLOW_NORTH_ON, RED_NORTH_ON
};
enum LED_STATE2 ledState2 = INIT2;

int led_index = 0;

void fsm_for_input_processing(void) {
    switch (buttonState) {
        case NORMAL_MODE:
            switch (ledState) {
                case INIT1:
                	setTimer(SCANNING_FREQ, TIMER3);

                    enable_RED_WEST();

                    setTimer(counterRED, TIMER1);

                    ledState = RED_WEST_ON;

                    update7SEG(0, counterRED);
                    break;
                case RED_WEST_ON:
                    if (timer_flag[TIMER1] == 1) {
                        enable_GREEN_WEST();

                        setTimer(counterGREEN, TIMER1);
                        timer_flag[TIMER1] = 0;

                        ledState = GREEN_WEST_ON;
                    }
                    update7SEG(0, counterRED);
                    break;
                case GREEN_WEST_ON:
                    if (timer_flag[TIMER1] == 1) {
                        enable_YELLOW_WEST();

                        setTimer(counterYELLOW, TIMER1);
                        timer_flag[TIMER1] = 0;

                        update7SEG(0, counterGREEN);

                        ledState = YELLOW_WEST_ON;
                    }
                    break;
                case YELLOW_WEST_ON:
                    if (timer_flag[TIMER1] == 1) {
                        enable_RED_WEST();

                        setTimer(counterRED, TIMER1);
                        timer_flag[TIMER1] = 0;

                        ledState = RED_WEST_ON;
                    }
                    break;
                default:
                    break;
            }

            switch (ledState2) {
                case INIT2:
                    enable_GREEN_NORTH();

                    setTimer(counterGREEN, TIMER2);

                    ledState2 = GREEN_NORTH_ON;
                    break;
                case GREEN_NORTH_ON:
                    if (timer_flag[TIMER2] == 1) {
                        enable_YELLOW_NORTH();

                        setTimer(counterYELLOW, TIMER2);
                        timer_flag[TIMER2] = 0;

                        ledState2 = YELLOW_NORTH_ON;
                    }
                    break;
                case YELLOW_NORTH_ON:
                    if (timer_flag[TIMER2] == 1) {
                        enable_RED_NORTH();

                        setTimer(counterRED, TIMER2);
                        timer_flag[TIMER2] = 0;

                        ledState2 = RED_NORTH_ON;
                    }
                    break;
                case RED_NORTH_ON:
                    if (timer_flag[TIMER2] == 1) {
                        enable_GREEN_NORTH();

                        setTimer(counterGREEN, TIMER2);
                        timer_flag[TIMER2] = 0;

                        ledState2 = GREEN_NORTH_ON;
                    }
                    break;
                default:
                    break;
            }
            if(timer_flag[TIMER3] == 1){
            	EnableWhich(led_index++);

            	setTimer(SCANNING_FREQ, TIMER3);
            	timer_flag[TIMER3] = 0;
            }
            break;
        case BUTTON1_MODE:

            break;
        case BUTTON2_MODE:

            // todo
            break;
        case BUTTON3_MODE:
            break;
        default:
            break;
    }
}


/*
 * scheduler.c
 *
 *  Created on: Nov 14, 2022
 *      Author: Admin
 */

#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

sTasks DelaySaved;
sTasks temp;

void swap(sTasks xp, sTasks yp){
    temp.Delay = xp.Delay;
    xp.Delay = yp.Delay;
    yp.Delay = temp.Delay;
}

void bubbleSort(){
    int i, j;
    for (i = 0; i < SCH_MAX_TASKS - 1; i++)
        for (j = 0; j < SCH_MAX_TASKS - i - 1; j++)
            if (SCH_tasks_G[j].Delay > SCH_tasks_G[j + 1].Delay)
            	swap(SCH_tasks_G[j], SCH_tasks_G[j + 1]);
}

void assignTaskID(){
	for(int index = 0; index < current_index_task; index++){
		SCH_tasks_G[index].TaskID = index;
	}
}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
	if(current_index_task < SCH_MAX_TASKS){
		SCH_tasks_G[current_index_task].pTask = pFunction;
		SCH_tasks_G[current_index_task].Delay = DELAY;
		SCH_tasks_G[current_index_task].Period =  PERIOD;
		SCH_tasks_G[current_index_task].RunMe = 0;
		bubbleSort(SCH_tasks_G[SCH_MAX_TASKS], SCH_MAX_TASKS);
		assignTaskID();

		DelaySaved.Delay = DELAY;

		current_index_task++;
	}
}

void SCH_Dispatch_Tasks(void){
	if(SCH_tasks_G[0].RunMe > 0){
		SCH_tasks_G[i].RunMe--;
		(*SCH_tasks_G[i].pTask)();
}

void SCH_Update(void){
	SCH_tasks_G[current_index_task].Delay -= DelaySaved.Delay;
}

void SCH_Delete_Task(uint32_t taskID){
	SCH_tasks_G[taskID].pTask = 0x0000;
	SCH_tasks_G[taskID].Delay = 0;
	SCH_tasks_G[taskID].Period = 0;
	SCH_tasks_G[taskID].RunMe = 0;
}

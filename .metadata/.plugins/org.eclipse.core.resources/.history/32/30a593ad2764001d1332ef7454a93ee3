/*
 * scheduler.c
 *
 *  Created on: Nov 14, 2022
 *      Author: Admin
 */

#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

uint32_t DelaySaved;
sTasks temp;

void swap(sTasks xp, sTasks yp){
    temp = xp;
    xp = yp;
    yp = temp;
}

void bubbleSort(){
    for (int i = 0; i < current_index_task - 1; i++){
    	 for (int j = 0; j < current_index_task - i - 1; j++){
    		 if (SCH_tasks_G[j].Delay > SCH_tasks_G[j + 1].Delay)
    			 swap(SCH_tasks_G[j], SCH_tasks_G[j + 1]);
    	 }
    }
}

void assignTaskID(){
	for(int index = 0; index < current_index_task; index++){
		SCH_tasks_G[index].TaskID = index;
	}
}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
	if(current_index_task < SCH_MAX_TASKS){
		SCH_tasks_G[current_index_task].pTask = pFunction;
		SCH_tasks_G[current_index_task].Delay = DELAY;
		SCH_tasks_G[current_index_task].Period =  PERIOD;
		SCH_tasks_G[current_index_task].RunMe = 0;

		bubbleSort(SCH_tasks_G[SCH_MAX_TASKS], SCH_MAX_TASKS);
		assignTaskID();

		current_index_task++;
	}
}

void SCH_Dispatch_Tasks(void){

	while(SCH_tasks_G[0].pTask != 0x0000){
		if(SCH_tasks_G[0].RunMe > 0){
			SCH_tasks_G[0].RunMe--;
			(*SCH_tasks_G[0].pTask)();

			for(int i = 1; i < current_index_task; i++){
				SCH_tasks_G[current_index_task].Delay -= SCH_tasks_G[0].Delay;
			}

			if(SCH_tasks_G[1].Delay == 0) SCH_tasks_G[1].RunMe++;
			if(SCH_tasks_G[0].Period > 0) SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period, SCH_tasks_G[0].Period);
			SCH_Delete_Tasks(0);
			DelaySaved = SCH_tasks_G[0].Delay;
		}
	}
}

void SCH_Update(void){
	SCH_tasks_G[0].Delay -= 1;
	if(SCH_tasks_G[0].Delay == 0) SCH_tasks_G[0].RunMe++;
}

void SCH_Delete_Tasks(uint32_t taskID){
	SCH_tasks_G[taskID].pTask = 0x0000;
	SCH_tasks_G[taskID].Delay = 0;
	SCH_tasks_G[taskID].Period = 0;
	SCH_tasks_G[taskID].RunMe = 0;

	for(int i = taskID; i < current_index_tasks - 1; i++){
		SCH_tasks_G[i] = SCH_tasks_G[i + 1];
	}
}

void REV_SCH_UP(){
	SCH_Add_Task(RED1_ON, 0, 50);
	SCH_Add_Task(RED2_ON, 50, 100);
	SCH_Add_Task(RED3_ON, 100, 150);
	SCH_Add_Task(RED4_ON, 150, 200);
	SCH_Add_Task(RED5_ON, 200, 250);
	DelaySaved = SCH_tasks_G[0].Delay;
}
